#git website
https://git-scm.com/

#help on git configuration commands
git help

#default git directory
/etc/gitconfig
Program Files\Git\etc\gitconfig

#user git directory
$HOME\.gitconfig

#basic configuration
git config --global user.name "carlotor"
git config --global user.email "dexilec82@msn.com"
git config --list
git config user.name
git config user.email

cd ~
ls -la | grep gitconfig
cat .gitconfig

#set the default editor, in my case I use visual studio code
git config --global core.editor "code --wait"

#now you can run the following command to use VS code as text editor for configuring git
git config --global -e

#to colorise git user interface
git config --global color.ui true

#auto-completion is already setup by default on windows but not on mac and linux

#access git manual page
git help log

#initialize a project
first create a project directory and navigate to that directory and type this command
git init

#a folder is initialize for git tracking if .git hidden folder is created inside the folder

#to add files to git folder for tracking then commit the changes
#. means to add in current folder location and m is message
#make changes
#add the changes
#commit the changes to the repository with the message
git add .
#or 
git add (filename)
#then commit
git commit -m "Initial commit"

#to bypass staging
git commit -a (filename)
#or
git commit --all

#with message
git commit -am "Your message"

#view commit log
git log

#view log up to 5 commit history logs and other additional filters
git log -n 5
git log --since(date)
git log --until(date)
git log --author(author)
git log --grep="Init"


#check the head branch and hash value
ls -la .git/
cat .git/HEAD
cat .git/refs/heads/master

#get the git status
#untracked means files are not in the git repository, git doesnt know about them so changes are not tracked
git status

#view changes and differences in the file changed in the working directory
git diff

#view changes and differences in the file changed in the staging area
git diff --staged
git diff --cache

#remove a file
git rm (filename to delete)
git commit -m "Deleted file"

#moving file
git mv (filename) (folder name)(filename)

#show the exact changes on a commit
git show (first part of sha value of the commit)

#compare commits and see the differences
git diff (first part of sha value of first change)..(first part of sha value of second change)

#to discard changes in the working directory to undo changes
git checkout --(file)

#to unstage changes
git reset HEAD (file)

#get logs
git log 
git log --oneline
git ls-tree (first 7 sha value)

#excluding files globally
git config --global core.excludesfile /path/to/.gitignore_global

#manual method of drilling information into specific commits
git log --oneline
git cat-file -p (first 7 sha value)
git ls-tree (first 7 sha value)
git cat-file -p (first 7 sha value from the file of ls-tree output command)

#alternative method of checking differences
git log --oneline
git diff (sha value 1st file)(sha value 2nd file) (filename)

#verify last commit and master branch has same sha value
cat .git/refs/heads/master
git log --oneline

#create a branch
git branch (branch name)
#verify the branch is created
ls -la .git/refs/heads
#verify the newly created branch points to the latest commit
cat .git/refs/heads/(branch name)
git log --oneline

#check the list of branches
git branch

#switching the active branch, first check out the branch
#to check out a branch means to make it active branch
git checkout (branch name)

#create a branch and checkout at the same time
git checkout -b (branch name)

#merging branches
git merge (branch name)
1. Switch to the branch into which the other branch should be merged. If youâ€™re
merging back into master, check out (switch to) master.
2. Run the git merge command, specifying the name of the branch to be merged
into master.
3. Supply a message (a commit message for the merge commit) describing the
changes being merged

#deleting branches
git branch -d (branch name)

#linking repositories with remote
cp -ar net-auto netauto2 --> copy net-auto repository to netauto2 repository
dexil@DESKTOP-N8DTM9J:~/netauto2$ git remote --> list existing remotes
dexil@DESKTOP-N8DTM9J:~/netauto2$ git remote add first ~/net-auto --> add a remote to the netauto2 that refers back to the original repository net-auto
dexil@DESKTOP-N8DTM9J:~/netauto2$ git branch -a  --> list branches including hiddedn remote tracking branches
dexil@DESKTOP-N8DTM9J:~/netauto2$ git remote update first --> update the branch with the remote tracking branch

#Instead of the two-step git remote add followed by git remote
#update, you can fetch information from a remote repository when
#you add the remote using the syntax
git remote add -f (name location)

#after fetching the date to update the remote tracking branch merge to make them part of the repository
git checkout master
git merge first/master

#pulling information from remote repositories
#instead of using two step process (git feath and git merge)
#use this command to fetch changes and merge them in a single operation
git pull (name)

#and the most simplest way of copying repository is cloning it
#this automatically creates a remote pointing back to the original repository
git clone (repository)(directory)























